name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run ruff linting
        run: ruff check backend/
        
      - name: Run black formatting check
        run: black --check backend/
        
      - name: Run mypy type checking
        run: mypy backend/

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ngspice
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run unit tests
        run: |
          pytest backend/tests/ -v --cov=backend --cov-report=xml --cov-report=term-missing
        env:
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Run frontend tests
        run: |
          cd frontend
          npm test
          
      - name: Check bundle size
        run: |
          cd frontend
          npm run build
          npm run size-check

  mcp-tests:
    name: MCP Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ngspice
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Install Playwright browsers
        run: playwright install chromium
        
      - name: Start backend service
        run: |
          cd backend
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
          
      - name: Run MCP tests
        run: |
          pytest backend/tests/mcp/ -v --browser chromium
        env:
          BACKEND_URL: http://localhost:8000
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          
      - name: Run safety check
        run: safety check
        
      - name: Run bandit security scan
        run: bandit -r backend/ -f json -o bandit-report.json
        
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: bandit-report.json

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build backend image
        run: |
          docker build -f backend/Dockerfile -t voltforge-backend:test .
          
      - name: Test docker-compose
        run: |
          docker-compose -f docker-compose.yml config
          
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install locust
          
      - name: Start backend service
        run: |
          cd backend
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
          
      - name: Run performance tests
        run: |
          locust -f backend/tests/performance/locustfile.py --headless -u 10 -r 2 -t 30s --host http://localhost:8000
        env:
          BACKEND_URL: http://localhost:8000